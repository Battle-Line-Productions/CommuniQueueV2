// <auto-generated />
using System;
using CommuniQueueV2;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CommuniQueueV2.Migrations
{
    [DbContext(typeof(CommuniQueueDbContext))]
    partial class CommuniQueueDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.AccessControlEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<int>("EntityType")
                        .HasColumnType("integer")
                        .HasColumnName("entity_type");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_access_control_entries");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_access_control_entries_user_id");

                    b.HasIndex("EntityType", "EntityId")
                        .HasDatabaseName("ix_access_control_entries_entity_type_entity_id");

                    b.ToTable("access_control_entries", (string)null);
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.Container", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<int>("Depth")
                        .HasColumnType("integer")
                        .HasColumnName("depth");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time");

                    b.HasKey("Id")
                        .HasName("pk_containers");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_containers_parent_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_containers_project_id");

                    b.ToTable("containers", (string)null);
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("BenefitUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("benefit_until");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_date");

                    b.Property<decimal?>("FlatAmountOff")
                        .HasColumnType("numeric")
                        .HasColumnName("flat_amount_off");

                    b.Property<decimal?>("PercentageOff")
                        .HasColumnType("numeric")
                        .HasColumnName("percentage_off");

                    b.HasKey("Id")
                        .HasName("pk_coupons");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_coupons_code");

                    b.ToTable("coupons", (string)null);
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.EnterprisePlanOverride", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("AllowedProjectsOverride")
                        .HasColumnType("integer")
                        .HasColumnName("allowed_projects_override");

                    b.Property<int?>("AllowedTemplateVersionsOverride")
                        .HasColumnType("integer")
                        .HasColumnName("allowed_template_versions_override");

                    b.Property<int?>("AllowedTemplatesOverride")
                        .HasColumnType("integer")
                        .HasColumnName("allowed_templates_override");

                    b.Property<int?>("AllowedTenantsOverride")
                        .HasColumnType("integer")
                        .HasColumnName("allowed_tenants_override");

                    b.Property<int?>("ApiRateLimitPerMinuteOverride")
                        .HasColumnType("integer")
                        .HasColumnName("api_rate_limit_per_minute_override");

                    b.Property<int?>("ApiThrottlingBurstOverride")
                        .HasColumnType("integer")
                        .HasColumnName("api_throttling_burst_override");

                    b.Property<int?>("EmailSendLimitPerMonthOverride")
                        .HasColumnType("integer")
                        .HasColumnName("email_send_limit_per_month_override");

                    b.Property<decimal?>("ExtraChargePerUnit")
                        .HasColumnType("numeric")
                        .HasColumnName("extra_charge_per_unit");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int?>("RetentionDaysOverride")
                        .HasColumnType("integer")
                        .HasColumnName("retention_days_override");

                    b.Property<int?>("SmsSendLimitPerMonthOverride")
                        .HasColumnType("integer")
                        .HasColumnName("sms_send_limit_per_month_override");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int?>("WebhookLimitPerMonthOverride")
                        .HasColumnType("integer")
                        .HasColumnName("webhook_limit_per_month_override");

                    b.HasKey("Id")
                        .HasName("pk_enterprise_plan_overrides");

                    b.HasIndex("TenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_enterprise_plan_overrides_tenant_id");

                    b.ToTable("enterprise_plan_overrides", (string)null);
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.NotificationTracking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from");

                    b.Property<bool>("IsTest")
                        .HasColumnType("boolean")
                        .HasColumnName("is_test");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.Property<Guid>("TemplateVersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_version_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time");

                    b.Property<int>("UsageType")
                        .HasColumnType("integer")
                        .HasColumnName("usage_type");

                    b.HasKey("Id")
                        .HasName("pk_notification_trackings");

                    b.HasIndex("TemplateVersionId")
                        .HasDatabaseName("ix_notification_trackings_template_version_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_notification_trackings_tenant_id");

                    b.HasIndex("TemplateId", "TemplateVersionId")
                        .HasDatabaseName("ix_notification_trackings_template_id_template_version_id");

                    b.ToTable("notification_trackings", (string)null);
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_projects_tenant_id");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AllowedProjects")
                        .HasColumnType("integer")
                        .HasColumnName("allowed_projects");

                    b.Property<int>("AllowedTemplateVersions")
                        .HasColumnType("integer")
                        .HasColumnName("allowed_template_versions");

                    b.Property<int>("AllowedTemplates")
                        .HasColumnType("integer")
                        .HasColumnName("allowed_templates");

                    b.Property<int>("AllowedTenants")
                        .HasColumnType("integer")
                        .HasColumnName("allowed_tenants");

                    b.Property<int>("ApiRateLimitPerMinute")
                        .HasColumnType("integer")
                        .HasColumnName("api_rate_limit_per_minute");

                    b.Property<int>("ApiThrottlingBurst")
                        .HasColumnType("integer")
                        .HasColumnName("api_throttling_burst");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_from");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("effective_to");

                    b.Property<int>("EmailSendLimitPerMonth")
                        .HasColumnType("integer")
                        .HasColumnName("email_send_limit_per_month");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("PricePerMonth")
                        .HasColumnType("numeric")
                        .HasColumnName("price_per_month");

                    b.Property<decimal>("PricePerYear")
                        .HasColumnType("numeric")
                        .HasColumnName("price_per_year");

                    b.Property<int>("RetentionDays")
                        .HasColumnType("integer")
                        .HasColumnName("retention_days");

                    b.Property<int>("Tier")
                        .HasColumnType("integer")
                        .HasColumnName("tier");

                    b.HasKey("Id")
                        .HasName("pk_subscription_plans");

                    b.HasIndex("Tier")
                        .HasDatabaseName("ix_subscription_plans_tier");

                    b.ToTable("subscription_plans", (string)null);
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContainerId")
                        .HasColumnType("uuid")
                        .HasColumnName("container_id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time");

                    b.Property<int>("UsageType")
                        .HasColumnType("integer")
                        .HasColumnName("usage_type");

                    b.HasKey("Id")
                        .HasName("pk_templates");

                    b.HasIndex("ContainerId")
                        .HasDatabaseName("ix_templates_container_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_templates_project_id");

                    b.ToTable("templates", (string)null);
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.TemplateRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("TemplateVersionId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_version_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_template_recipients");

                    b.HasIndex("TemplateVersionId")
                        .HasDatabaseName("ix_template_recipients_template_version_id");

                    b.ToTable("template_recipients", (string)null);
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.TemplateVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("integer")
                        .HasColumnName("version_number");

                    b.HasKey("Id")
                        .HasName("pk_template_versions");

                    b.HasIndex("TemplateId")
                        .HasDatabaseName("ix_template_versions_template_id");

                    b.HasIndex("TemplateId", "VersionNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_template_versions_template_id_version_number");

                    b.ToTable("template_versions", (string)null);
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_user_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_tenants");

                    b.HasIndex("OwnerUserId")
                        .HasDatabaseName("ix_tenants_owner_user_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_tenants_user_id");

                    b.ToTable("tenants", (string)null);
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.TenantApiKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_expired");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key_hash");

                    b.Property<string>("Scopes")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("scopes");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time");

                    b.HasKey("Id")
                        .HasName("pk_tenant_api_keys");

                    b.HasIndex("KeyHash")
                        .HasDatabaseName("ix_tenant_api_keys_key_hash");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_tenant_api_keys_tenant_id");

                    b.ToTable("tenant_api_keys", (string)null);
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.TenantCoupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("BenefitUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("benefit_until");

                    b.Property<Guid>("CouponId")
                        .HasColumnType("uuid")
                        .HasColumnName("coupon_id");

                    b.Property<DateTime>("DateApplied")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_applied");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_tenant_coupons");

                    b.HasIndex("CouponId")
                        .HasDatabaseName("ix_tenant_coupons_coupon_id");

                    b.HasIndex("TenantId", "CouponId")
                        .IsUnique()
                        .HasDatabaseName("ix_tenant_coupons_tenant_id_coupon_id");

                    b.ToTable("tenant_coupons", (string)null);
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.TenantSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CouponCode")
                        .HasColumnType("text")
                        .HasColumnName("coupon_code");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid?>("EnterpriseOverridesId")
                        .HasColumnType("uuid")
                        .HasColumnName("enterprise_overrides_id");

                    b.Property<decimal>("FinalPricePerMonth")
                        .HasColumnType("numeric")
                        .HasColumnName("final_price_per_month");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<Guid>("SubscriptionPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("subscription_plan_id");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_tenant_subscriptions");

                    b.HasIndex("EnterpriseOverridesId")
                        .HasDatabaseName("ix_tenant_subscriptions_enterprise_overrides_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_tenant_subscriptions_is_active");

                    b.HasIndex("SubscriptionPlanId")
                        .HasDatabaseName("ix_tenant_subscriptions_subscription_plan_id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_tenant_subscriptions_tenant_id");

                    b.ToTable("tenant_subscriptions", (string)null);
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.TenantUserMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_tenant_user_maps");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_tenant_user_maps_user_id");

                    b.HasIndex("TenantId", "UserId")
                        .HasDatabaseName("ix_tenant_user_maps_tenant_id_user_id");

                    b.ToTable("tenant_user_maps", (string)null);
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.TrackingRecipient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("NotificationTrackingId")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_tracking_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_tracking_recipients");

                    b.HasIndex("NotificationTrackingId")
                        .HasDatabaseName("ix_tracking_recipients_notification_tracking_id");

                    b.ToTable("tracking_recipients", (string)null);
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_super_admin");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("SsoId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sso_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date_time");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("SsoId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_sso_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.AccessControlEntry", b =>
                {
                    b.HasOne("CommuniQueueV2.Models.Domain.User", "User")
                        .WithMany("AccessControlEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_access_control_entries_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.Container", b =>
                {
                    b.HasOne("CommuniQueueV2.Models.Domain.Container", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_containers_containers_parent_id");

                    b.HasOne("CommuniQueueV2.Models.Domain.Project", "Project")
                        .WithMany("Containers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_containers_projects_project_id");

                    b.Navigation("Parent");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.EnterprisePlanOverride", b =>
                {
                    b.HasOne("CommuniQueueV2.Models.Domain.Tenant", "Tenant")
                        .WithOne("EnterprisePlanOverride")
                        .HasForeignKey("CommuniQueueV2.Models.Domain.EnterprisePlanOverride", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enterprise_plan_overrides_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.NotificationTracking", b =>
                {
                    b.HasOne("CommuniQueueV2.Models.Domain.Template", "Template")
                        .WithMany("NotificationTrackings")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_trackings_templates_template_id");

                    b.HasOne("CommuniQueueV2.Models.Domain.TemplateVersion", "TemplateVersion")
                        .WithMany("NotificationTrackings")
                        .HasForeignKey("TemplateVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_trackings_template_versions_template_version_id");

                    b.HasOne("CommuniQueueV2.Models.Domain.Tenant", "Tenant")
                        .WithMany("NotificationTrackings")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_trackings_tenants_tenant_id");

                    b.Navigation("Template");

                    b.Navigation("TemplateVersion");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.Project", b =>
                {
                    b.HasOne("CommuniQueueV2.Models.Domain.Tenant", "Tenant")
                        .WithMany("Projects")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.Template", b =>
                {
                    b.HasOne("CommuniQueueV2.Models.Domain.Container", "Container")
                        .WithMany("Templates")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_templates_containers_container_id");

                    b.HasOne("CommuniQueueV2.Models.Domain.Project", "Project")
                        .WithMany("Templates")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_templates_projects_project_id");

                    b.Navigation("Container");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.TemplateRecipient", b =>
                {
                    b.HasOne("CommuniQueueV2.Models.Domain.TemplateVersion", "TemplateVersion")
                        .WithMany("Recipients")
                        .HasForeignKey("TemplateVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_recipients_template_versions_template_version_id");

                    b.Navigation("TemplateVersion");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.TemplateVersion", b =>
                {
                    b.HasOne("CommuniQueueV2.Models.Domain.Template", "Template")
                        .WithMany("Versions")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_versions_templates_template_id");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.Tenant", b =>
                {
                    b.HasOne("CommuniQueueV2.Models.Domain.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tenants_users_owner_user_id");

                    b.HasOne("CommuniQueueV2.Models.Domain.User", null)
                        .WithMany("OwnedTenants")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_tenants_users_user_id");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.TenantApiKey", b =>
                {
                    b.HasOne("CommuniQueueV2.Models.Domain.Tenant", "Tenant")
                        .WithMany("TenantApiKeys")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_api_keys_tenants_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.TenantCoupon", b =>
                {
                    b.HasOne("CommuniQueueV2.Models.Domain.Coupon", "Coupon")
                        .WithMany("TenantCoupons")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_coupons_coupons_coupon_id");

                    b.HasOne("CommuniQueueV2.Models.Domain.Tenant", "Tenant")
                        .WithMany("TenantCoupons")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_coupons_tenants_tenant_id");

                    b.Navigation("Coupon");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.TenantSubscription", b =>
                {
                    b.HasOne("CommuniQueueV2.Models.Domain.EnterprisePlanOverride", "EnterpriseOverrides")
                        .WithMany("TenantSubscriptions")
                        .HasForeignKey("EnterpriseOverridesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_tenant_subscriptions_enterprise_plan_overrides_enterprise_o");

                    b.HasOne("CommuniQueueV2.Models.Domain.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("TenantSubscriptions")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_subscriptions_subscription_plans_subscription_plan_id");

                    b.HasOne("CommuniQueueV2.Models.Domain.Tenant", "Tenant")
                        .WithMany("TenantSubscriptions")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_subscriptions_tenants_tenant_id");

                    b.Navigation("EnterpriseOverrides");

                    b.Navigation("SubscriptionPlan");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.TenantUserMap", b =>
                {
                    b.HasOne("CommuniQueueV2.Models.Domain.Tenant", "Tenant")
                        .WithMany("TenantUserMaps")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_user_maps_tenants_tenant_id");

                    b.HasOne("CommuniQueueV2.Models.Domain.User", "User")
                        .WithMany("TenantUserMaps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_user_maps_users_user_id");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.TrackingRecipient", b =>
                {
                    b.HasOne("CommuniQueueV2.Models.Domain.NotificationTracking", "NotificationTracking")
                        .WithMany("Recipients")
                        .HasForeignKey("NotificationTrackingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tracking_recipients_notification_trackings_notification_tra");

                    b.Navigation("NotificationTracking");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.Container", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.Coupon", b =>
                {
                    b.Navigation("TenantCoupons");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.EnterprisePlanOverride", b =>
                {
                    b.Navigation("TenantSubscriptions");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.NotificationTracking", b =>
                {
                    b.Navigation("Recipients");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.Project", b =>
                {
                    b.Navigation("Containers");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.SubscriptionPlan", b =>
                {
                    b.Navigation("TenantSubscriptions");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.Template", b =>
                {
                    b.Navigation("NotificationTrackings");

                    b.Navigation("Versions");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.TemplateVersion", b =>
                {
                    b.Navigation("NotificationTrackings");

                    b.Navigation("Recipients");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.Tenant", b =>
                {
                    b.Navigation("EnterprisePlanOverride");

                    b.Navigation("NotificationTrackings");

                    b.Navigation("Projects");

                    b.Navigation("TenantApiKeys");

                    b.Navigation("TenantCoupons");

                    b.Navigation("TenantSubscriptions");

                    b.Navigation("TenantUserMaps");
                });

            modelBuilder.Entity("CommuniQueueV2.Models.Domain.User", b =>
                {
                    b.Navigation("AccessControlEntries");

                    b.Navigation("OwnedTenants");

                    b.Navigation("TenantUserMaps");
                });
#pragma warning restore 612, 618
        }
    }
}
