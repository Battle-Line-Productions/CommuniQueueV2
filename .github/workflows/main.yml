name: Continuous Deployment

on:
  push:
    branches: [main, next]
  pull_request:
    branches: [main, next]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.x

      - run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test with coverage
        run: |
          dotnet test --no-restore --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=./coverage.opencover.xml

      - name: Unit Tests + SonarScanner
        uses: highbyte/sonarscan-dotnet@v2.4.1
        with:
          sonarProjectKey: Battle-Line-Productions_CommuniQueue
          sonarProjectName:  CommuniQueue
          sonarOrganization: battle-line-productions
          dotnetTestArguments: --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"

      - name: Run Snyk test to check for vulnerabilities
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=./CommuniQueue.sln

      - name: Run Snyk monitor to report vulnerabilities to snyk.io
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --severity-threshold=high --file=./CommuniQueue.sln

      - name: Set up Node.js (for Serverless)
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      # - name: Install npm dependencies
      #   run: npm install --frozen-lockfile --force

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: arn:aws:iam::139279799285:role/Deployment-Role
      #     aws-region: us-east-2
      #     output-credentials: true

      # - run: aws sts get-caller-identity

      # - name: Make build script executable
      #   run: chmod +x ./build.sh

      # - name: Set environment to Development
      #   if: github.ref == 'refs/heads/next'
      #   run: echo "ASPNETCORE_ENVIRONMENT=dev" >> $GITHUB_ENV

      # - name: Set environment to Production
      #   if: github.ref == 'refs/heads/main'
      #   run: echo "ASPNETCORE_ENVIRONMENT=prod" >> $GITHUB_ENV

      # - name: Execute build script
      #   run: ./build.sh

      # - name: Package and Deploy to Dev
      #   if: github.ref == 'refs/heads/next'
      #   env:
      #     SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
      #   run: npm run deploy:dev

      # - name: Package and Deploy to Prod
      #   if: github.ref == 'refs/heads/main'
      #   env:
      #     SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
      #   run: npm run deploy:prod
